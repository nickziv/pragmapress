#!/bin/ksh

#
# The first arg is the blog name (wordpress.com assuemd). The second arg is the
# subdirectory-path. And the third arg is the post-number (usually 0) or
# page-name. This command returns a title, the path of the post, and the path
# of the PDF version of the post.
#

if [[ $# < 3 ]] then
	echo "Too few arguments!";
	exit;
fi

dir=../blog/$1.wordpress.com/$2/$3

ntxtfile=$( ls $dir | grep txt$ | wc -l )

if [[ $ntxtfile -gt 1 ]] then
	echo "Too many txt files in:";
	echo $dir;
	exit;
fi

if [[ $ntxtfile  -lt 1 ]] then
	echo "Need a txt file in:";
	echo $dir;
	exit;
fi

fname=$( ls $dir | grep txt$ )
bname=$( ls $dir | grep txt$ | sed s/\.txt//g )
hname=$bname".html"
xname=$bname".xml"
# We set the pdf's name to that of the directory.
# This way, we can upload a uniquely named PDF to the media library, instead of
# one named default.pdf. 
pname=$3".pdf"

inpath=$dir/$fname
outpath=$dir/$hname
xoutpath=$dir/$xname
poutpath=$dir/$pname

asciidoc -b html4 -d article $inpath
if [[ $2 == "posts" ]]; then
	asciidoc -b docbook -d article $inpath
	# We don't a TOC for a blog post
	dblatex --type=pdf -P doc.toc.show="0" -T simple -b pdftex $xoutpath -o $poutpath
fi
# Get rid asciidoc's _stupid_ ^M's
dos2unix $outpath $outpath.temp
mv $outpath.temp $outpath
#This title is good, we just want to scrub-out the header-tags.
htmltitle=$( ./scrub.ksh $outpath )

stripped_title=$(echo $htmltitle | sed 's/<h1>//g' | sed 's/<\/h1>//g')

title_json="\"title\": \"$stripped_title\""
path_json="\"path\": \"$outpath\""
pdf_json="\"pdf\": \"$poutpath\""

print "{ $title_json, $path_json, $pdf_json}"


